import example.*

describe "ETAPA 1" {
  const leo = new Paciente(edad=40, dolor=10, fortalezaMuscular=20)
  const milena = new Paciente(edad=3, dolor=30, fortalezaMuscular=50)
  
  const magneto1 = new Magneto()
  const bici1 = new Bicicleta()
  const mini1 = new Minitramp()
  
  
  test "leonardo puede usar el magneto" {
    assert.that(leo.puedeUsar(magneto1))
  }
  test "leonardo puede usar la bicicleta" {
    assert.that(leo.puedeUsar(bici1))
  }
  test "leonardo puede usar mini" {
    assert.that(leo.puedeUsar(mini1))
  }
  test "mileana puede usar solo el magneto" {
    assert.that(milena.puedeUsar(magneto1))
  }
  test "mileana no puede usar la bicicleta" {
    assert.notThat(milena.puedeUsar(bici1))
  }
  test "mileana no puede usar el minitramp" {
    assert.notThat(milena.puedeUsar(mini1))
  }
  test "el dolor de leo baja a 9 despues de usar el magneto" {
    leo.usar(magneto1)
    assert.equals(9, leo.dolor())
  }
  test "el dolor de milena baja a 27 despues de usar el magneto" {
    milena.usar(magneto1)
    assert.equals(27, milena.dolor())
  }
  test "el dolor de leo baja a 6 y su fortaleza aumenta a 23 despues de usar la bicleta" {
    leo.usar(bici1)
    assert.equals(6, leo.dolor())
    assert.equals(23, leo.fortalezaMuscular())
  }
  test "Después de usar el minitramp una vez, la fortaleza de Leonardo sube a 24" {
    leo.usar(mini1)
    assert.equals(24, leo.fortalezaMuscular())
  }
}

describe "ETAPA 2" {
  const leo = new Paciente(edad=40, dolor=10, fortalezaMuscular=20)
  const milena = new Paciente(edad=3, dolor=30, fortalezaMuscular=50)
  
  const magneto1 = new Magneto()
  const bici1 = new Bicicleta()
  const mini1 = new Minitramp()
  
  method initialize(){
    leo.añadirAparatos([bici1, mini1, bici1, magneto1 ])
    milena.añadirAparatos([magneto1, bici1])
  }
  
  test "leo puede hacer la rutina que tiene asignada" {
    assert.that(leo.puedeRealizarLaRutina())
  }
  test "leo hace la rutina y su dolor baja a 1.8 y su fortaleza sube a 30" { // no te dicen el orden para leonardo
    leo.realizarRutinaCompleta()
    assert.equals(1.8, leo.dolor())
    assert.equals(30, leo.fortalezaMuscular())
  }
  test "milena no puede hacer la rutina que tiene asignada" {
    assert.notThat(milena.puedeRealizarLaRutina())
  }
}

describe "ETAPA 3"{
  const nicolas = new Resistente(edad=40, dolor=10, fortalezaMuscular=20)
  const victoria = new Caprichoso(edad=30, dolor=10, fortalezaMuscular=40)
  const julian = new Caprichoso(edad=20, dolor=54, fortalezaMuscular=50)
  const zoe = new RapidaRecuperacion(edad=50, dolor=14, fortalezaMuscular=40)


  const magneto1 = new Magneto(color="verde")
  const bici1 = new Bicicleta(color="rojo")
  const mini1 = new Minitramp()
  const bici2 = new Bicicleta()

  method initialize(){
    nicolas.añadirAparatos([bici1, mini1, bici1, magneto1 ])
    victoria.añadirAparatos([bici1, mini1, bici1, magneto1 ])
    julian.añadirAparatos([bici1, magneto1, bici2 ])
    nicolas.añadirAparatos([bici1, mini1, bici1, magneto1 ])

  }
test "nicolas puede hacer la rutina y después de hacerla una vez, su dolor baja a 1.8 y su fortaleza sube a 34"{
    nicolas.realizarRutinaCompleta()
    assert.that(nicolas.puedeRealizarLaRutina())
    assert.equals(1.8, nicolas.dolor())
    assert.equals(34, nicolas.fortalezaMuscular())
}

test "victoria no puede hacer la rutina"{
    assert.notThat(victoria.puedeRealizarLaRutina())
}

test "julian puede hacer la rutina y después de hacerla una vez, su dolor baja a 29.3 y su fortaleza sube a 62"{
    julian.realizarRutinaCompleta()
    assert.that(julian.puedeRealizarLaRutina())
    assert.equals(29.3, julian.dolor())
    assert.equals(62, julian.fortalezaMuscular())
}

test "zoe puede hacer la rutina, asignamos 2 como valor para el decremento de pacientes de rápida recuperación y después de hacer su rutina una vez, su dolor baja a 3.4 y su fortaleza sube a 51"{
    assert.that(zoe.puedeRealizarLaRutina())
    dolor.decrementar(2)
    zoe.realizarRutinaCompleta()
    assert.equals(3.4, zoe.dolor())
    assert.equals(51, zoe.fortalezaMuscular())
}





}